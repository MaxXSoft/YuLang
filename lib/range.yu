// definition of range
public struct Range {
  __cur: i32,
  __end: i32,
  __step: i32,
  __close: bool,
}


// iterator method for 'for-in' loop
public def next(this: Range var&): i32 {
  let cur = this.__cur
  this.__cur += this.__step
  cur
}

// iterator method for 'for-in' loop
public def last(this: Range&): bool {
  if this.__step > 0 {
    this.__cur >= this.__end
  }
  else {
    this.__cur <= this.__end
  }
}

// generate range '[begin, end)'
public def until(begin: i32, end: i32): Range {
  [Range] {begin, end, 1, false}
}

// generate range '[begin, end]'
public def to(begin: i32, end: i32): Range {
  [Range] {begin, end + 1, 1, true}
}

// set the step of generated range
public def step(this: Range, step: i32): Range {
  if step > 0 || !this.__close {
    [Range] {this.__cur, this.__end, step, this.__close}
  }
  else {
    [Range] {this.__cur, this.__end - 2, step, this.__close}
  }
}
