public import sys.string

public struct StrView {
  __str: u8*,
  __len: u32,
}

// create a new string view by a null terminated string
inline def newStrView(str: u8*): StrView {
  [StrView] {str, strlen(str)}
}

// create a new string view by a slice of bytes
inline def newStrView(buf: u8*, len: u32): StrView {
  [StrView] {buf, len}
}

// get string data of string view (not guarantee to be null terminated)
inline def str(this: StrView&): u8* {
  this.__str
}

// get length of string view
inline def len(this: StrView&): u32 {
  this.__len
}

// check whether the view is empty
inline def empty(this: StrView&): bool {
  this.__len == 0 as u32
}

// get the specified character
inline def at(this: StrView&, i: i32): u8 {
  this.__str[i]
}
inline def at(this: StrView&, i: u32): u8 {
  this.__str[i]
}

// get the first character
inline def front(this: StrView&): u8 {
  this.__str[0]
}

// get the last character
inline def back(this: StrView&): u8 {
  this.__str[this.__len - 1 as u32]
}

// check if equals to a null terminated string
public def ==(this: StrView&, str: u8*): bool {
  var i = 0
  while i as u32 < this.__len {
    if this.__str[i] != str[i] || str[i] == '\0' {
      return false
    }
    i += 1
  }
  str[i] == '\0'
}
inline def !=(this: StrView&, str: u8*): bool {
  !(this == str)
}
inline def ==(str: u8*, this: StrView&): bool {
  this == str
}
inline def !=(str: u8*, this: StrView&): bool {
  !(this == str)
}

// check if equals to another string view
public def ==(this: StrView&, that: StrView&): bool {
  if this.__len == that.__len {
    var i = 0
    while i as u32 < this.__len {
      if this.__str[i] != that.__str[i] {
        return false
      }
      i += 1
    }
    true
  }
  else {
    false
  }
}
inline def !=(this: StrView&, that: StrView&): bool {
  !(this == that)
}

// shrinks the view by moving its start forward
inline def removePrefix(this: StrView var&, n: i32) {
  this.__str += n
  this.__len -= n as u32
}

// shrinks the view by moving its end backward
inline def removeSuffix(this: StrView var&, n: i32) {
  this.__len -= n as u32
}


public struct __StrViewSplitIter {
  cur: u8*,
  len: u32,
  delimiter: u8,
}

// get split iterator
inline def split(this: StrView&, delimiter: u8): __StrViewSplitIter {
  [__StrViewSplitIter] {this.__str, this.__len, delimiter}
}

// iterator method 'next'
public def next(this: __StrViewSplitIter var&): StrView {
  // find next position of delimiter
  var len = 0 as u32
  while len < this.len {
    if this.cur[len] == this.delimiter {
      break
    }
    len += 1 as u32
  }
  // get next string view
  let sv = newStrView(this.cur, len)
  // update current iterator
  if len < this.len {
    len += 1 as u32
  }
  this.cur += len
  this.len -= len
  sv
}

// iterator method 'last'
inline def last(this: __StrViewSplitIter&): bool {
  this.len == 0 as u32
}
